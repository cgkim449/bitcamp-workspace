// 예외 처리 문법을 적용하기 전 - 리턴 값으로 오류를 알릴 때의 문제를 극복
// 예외 처리 문법을 적용하기 전 - 예외 발생 시 시스템 멈춤 문제 
// (연산자가 유효하지 않는)예외를 처리하는 예전 방식 : 리턴값을 좀처럼 나오지 않는 희귀한값(-121212)을 이용
// 근데 문제가 2가지 있다(1 리턴값이 -121212일 수 있다는 한계가 있고, 
// 2 어떤값을 0으로 나누면 ArithmeticException오류가 뜨면서 시스템이 멈춤)
// 그래서 예외처리문법이 탄생한다

// (복습 : /        3                       3
// 여러개 공백를 하나의 공백 취급
// nextInt나, next())
package com.eomcs.exception.ex1;

public class Exam0131 {
  public static void main(String[] args) {
    // 아무리 희귀한 값을 리턴한다 하더라도 결국에는 그 희귀한 값 또한
    // 정상 값일 수 있다.
    // 이것은 해결할 수 없다.
    // => 다음 예는 계산 결과가 -1212121212 이다.
    // => 그럼에도 불구하고 연산자가 유효하지 않다고 출력된다.
    int result = Calculator2.compute("+", -2078654356, 866533144);
    if (result == -1212121212) {
      System.out.println("유효하지 않은 연산자입니다!");
    } else {
      System.out.println(result);
    }
    // 결국 리턴 값을 검사하여 오류 여부를 처리하는 것으로는
    // 이런 문제를 해결할 순 없다!!

    // 리턴 값으로 작업 오류를 알려주는 방식의 한계를 극복하기 위해 만든 문법이
    // "예외처리" 문법이다.
    // => 예외 상황이 발생했을 때 호출자에게 예외 정보!!를 던져주는 문법이다.
  }
}


