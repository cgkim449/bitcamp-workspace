// # 캡슐화란 : 코드(필드, 생성자, 메서드? 등) 사용 범위 제어

// ## protected 필드 진짜 의미
// - 질문

//----------------------------------------------------------------------------------
// #캡슐화 활용
// - 안정성
// - 확장성

// ## 필드 접근 제한
//  - 안정성 : 1) 필드 접근 막기(메서드로 간접적으로 값넣음)
//            2) compute() 같은 메서드 호출 누락 막기(세터 호출할때마다 그 메서드 호출함)
//  - 확장성 : 단순히 필드에 값 넣을 때는 유효성 검증 등 코드 사용 못함

// ## 생성자 접근 제한(factory method) ?
// - 생성자 접근을 제한하고 메서드를 통해 인스턴스 생성해 인스턴스 필드에 값넣음
// - 생성자로 직접 인스턴스를 생성하면 너무 복잡하니까 다른 메서드를 통해 인스턴스를 생성

package com.eomcs.oop.ex07.b;

import com.eomcs.oop.ex07.b.sub.C;

public class Encapsulation2P extends C {
  public static void main(String[] args) {
    A obj1 = new A();
    obj1.

  }
}
