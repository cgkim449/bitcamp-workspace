// ## 과정 : 문법의 당위성(기능성, 편리성, 가독성), 시행착오
// 1. 메서드는 기본이 스태틱이었다, 스태틱은 단순히 그 클래스 안 어디에서나 사용될수 있도록 하는거다
// 2. 클래스의 탄생:  - 서로 관련된 일을 하는 메서드들을 함께 묶자 (가독성),
//                  - 특정한 상황에 맞는 데이터들을 함께 묶자 ?? (새데이터타입정의) (기능성??)
// 3. 클래스를 밖으로 보내자 : (가독성)
// 4. result 변수를 그걸 다루는 메서드들과 함께 같은 class에 두자 (가독성, 코드 줄어듬)
//    근데 계산기를 한번에 한대만 사용할 수 있다, 계산기를 동시에 여러대를 사용하고 싶다
// 5. 그래서 인스턴스 변수가 탄생! : (기능성)
// 6. 근데 메서드가 스태틱, 인스턴스 변수 둘다 받을 수 있으나
//   인스턴스변수를 받을 때 일일히 파라미터로 메모리 주소를 전달하는게 불편하다
// 7. 그래서 인스턴스 메서드가 탄생! : (가독성, 코드 줄어듬),
//      this에 c1값을 자동복사(즉 기본 데이터를 받는 것이다 ??)
//      static을 떼서 nonstatic으로 만들었다 근데 왜 이름이 instance 메서드냐, this!!
//      this를 메서드안에서 맘대로 사용하여 작성가능
//      (인스턴스 메서드도 스태틱 변수를 받을 수 있나 ??)
//---------------------------------------------------------------
// ## 객체에 대한 이해
// 1. 메서드 리턴값은 언제나 1개지만
// 메서드 '리턴값을 여러개'로 하고싶을때 객체를 사용하며
// 2. 또한 객체는 Heap에 확보되기 때문에 메서드는 call by reference하고 리턴했을 때
// 소멸하는 반면 객체는 사라지지않는다
// 3. 클래스 안의 메서드는 한번에 한개밖에 실행못하지만
// 클래스 안의 메서드를 '동시에 여러개' 사용하고 싶을 때 객체를 사용
//---------------------------------------------------------------
// ## eomcs 정리
// - 클래스 변수(스태틱 변수) : 클래스가 메모리에 로딩될때 자동으로 Method Area의 Static영역에 확보
// - 클래스 변수는 클래스가 로딩될 때 한 번 생성된다
// - 클래스 변수는 오직 한개만 존재하기 때문에 여러개의 작업을 동시에 진행할 수 없다

// - 인스턴스 변수 : 인스턴스 변수는 클래스가 로딩될 때 만들어지지않는다!
// - 인스턴스 변수를 다루는 메서드는 작업을 수행할 때 그 인스턴스 주소를 받아야 한다.
// - 오직 인스턴스 주소를 통해서만 접근할 수 있다
// - 인스턴스 메서드를 사용하면 파라미터로 메모리 주소를 전달할 필요가 없다.
//----------------------------------------------------------------
// 인스턴스 메서드, 인스턴스 변수는 레퍼런스.메서드or변수(레퍼런스의 연산)
// 클래스 메서드, 클래스 변수는 클래스.메서드or변수 (클래스 소속의 변수, 메서드)
package com.eomcs.oop.ex02;

import com.eomcs.util.Calculator;

public class Exam02 {

  public static void main(String[] args) {
    //  2 + 3 - 1 * 7 / 3 = ?

    Calculator c1 = new Calculator();
    Calculator c2 = new Calculator();
    c1.plus(2);
    c2.plus(2);
    c1.plus(3);
    c2.plus(3);
    c1.minus(1);
    c2.plus(3);
    c1.multiple(7);
    c2.plus(3);
    c1.divide(3);
    c2.plus(3);
    System.out.println(c1.result);
    System.out.println(c2.result);

  }
}
